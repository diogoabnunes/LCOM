// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>
#include <stdint.h>
#include <stdio.h>

#include "kbc.h"
#include "mouse.h"
#include "i8042.h"
#include "i8254.h"
// Any header files included below this line should have been created by you
uint16_t packet[3];
uint32_t byte;
uint32_t packet_counter = 0;
struct packet pp;
uint32_t status;
extern unsigned int interruptionCounter;

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab4/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab4/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}


int (mouse_test_packet)(uint32_t cnt) {
  int ipc_status;
  message msg;
  uint32_t r;
  int pos = 1;
  uint8_t irq_set;

  if (mouse_subscribe_int(&irq_set) != 0)
    return 1;

  //Enabling stream mode since it is disabled in text mode
  //Enabling data reporting

  while (packet_counter < cnt) {
    if ((r = driver_receive(ANY,&msg,&ipc_status)) != 0) {
      printf("driver_receive failed wih: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status)) { /* received notification */
      switch(_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:
          if (msg.m_notify.interrupts & irq_set) {

            mouse_ih();
            if (pos == 1)
            {
              if(status & BIT(3))
              {
                packet[0] = status;
                pos++;
              }
            }
            else if (pos == 2)
            {
              packet[1] = status;
              pos++;
            }
            else if (pos == 3)
            {
              packet[2] = status;
              packet_create();
              mouse_print_packet(&pp);

              packet_counter += 1;
              pos = 1;
            }

          }
          break;
        default:
          break;
      }
    }
  }

  //Disabling data reporting
  // Something more?

  if (mouse_unsubscribe_int() != 0)
    return 1;

  return 0;
}

int (mouse_test_remote)(uint16_t period, uint8_t cnt) {
    
  //Disabling Minix's default IH
  //Disabling mouse data reporting
  //Setting remote mode

  //period ?

  while(cnt != 0)
  {
    tickdelay(micros_to_ticks(DELAY_US));
    mouse_ih();

    if (pos == 1)
    {
      if(status & BIT(3))
      {
        packet[0] = status;
        pos++;
      }
    }
    else if (pos == 2)
    {
      packet[1] = status;
      pos++;
    }
    else if (pos == 3)
    {
      packet[2] = status;
      packet_create();
      mouse_print_packet(&pp);

      packet_counter += 1;
      pos = 1;
    }
  }

  //Setting stream mode
  //Disable data reporting
  //Reenabling Minix's default IH

  return 0;
}

int (mouse_test_async)(uint8_t idle_time) {
    
  int ipc_status;
  message msg;
  uint32_t r;
  int pos = 1;

  unsigned int max = idle_time * 60;

  uint8_t bit_mouse, bit_timer;
  if((mouse_subscribe_int(&bit_mouse)) != 0) return 1;
  if((timer_subscribe_int(&bit_timer)) != 0) return 1;

  int irq_mouse = BIT(bit_mouse);
  int irq_timer = BIT(bit_timer);

  //Enabling stream mode since it is disabled in text mode
  //Enabling data reporting

  //todo
  while (interruptionCounter < max) {
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0)
    {
      printf("driver_receive failed with: %d", r);
      continue;
    }

    if (is_ipc_notify(ipc_status)) { //received notification
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE: // hardware interrupt notification
          if (msg.m_notify.interrupts & irq_mouse)
          {
            mouse_ih();
            interruptionCounter = 0;
            if (pos == 1)
            {
              if(status & BIT(3))
              {
                packet[0] = status;
                pos++;
              }
            }
            else if (pos == 2)
            {
              packet[1] = status;
              pos++;
            }
            else if (pos == 3)
            {
              packet[2] = status;
              packet_create();
              mouse_print_packet(&pp);

              packet_counter += 1;
              pos = 1;
            }
          }

          if (msg.m_notify.interrupts & irq_timer) //subscribed interrupt
            timer_int_handler(); // handle interrupt

          break;
        default:
          break; //no other notifications expected: do nothing
      } // end of switch
    } // end of is_ipc_notify
  } // end of while

  //Disabling data reporting

  if (kbc_unsubscribe_int() != 0)
    return 1;
  if (timer_unsubscribe_int() != 0)
    return 1;

  return 0;
}

int (mouse_test_gesture)(uint8_t x_len, uint8_t tolerance) {
    /* To be completed */
    printf("%s: under construction\n", __func__);
    return 1;
}
